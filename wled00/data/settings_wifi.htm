<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
	<title>WiFi 设置</title>
	<script src="common.js" async type="text/javascript"></script>
	<script>
		var scanLoops = 0, preScanSSID = "";
		var maxNetworks = 3;
		function N() {
			const button = gId("scan");
			button.disabled = true;
			button.textContent = "正在扫描……";

			fetch(getURL("/json/net")).then((response) => {
				return response.json();
			}).then((json) => {
				// Get the list of networks only, defaulting to an empty array.
				return Object.assign(
					{},
					{"networks": []},
					json,
				).networks.sort(
					// Sort by signal strength, descending.
					(a, b) => b.rssi - a.rssi
				).reduce(
					// Filter out duplicate SSIDs. Since it is sorted by signal
					// strength, the strongest signal will be kept in the
					// order it as originally appeared in the array.
					(unique, other) => {
						if(!unique.some(obj => obj.ssid === other.ssid)) {
							unique.push(other);
						}
						return unique;
					},
					[],
				);
			}).then((networks) => {
				// If there are no networks, fetch it again in a second.
				// but only do this a few times.
				if (networks.length === 0 && scanLoops < 10) {
					scanLoops++;
					setTimeout(N, 1000);
					return;
				}
				scanLoops = 0;

				if (networks.length > 0) {
					let cs = d.querySelectorAll("#wifi_entries input[type=text][name^=CS]");
					for (let input of (cs||[])) {
						let found = false;
						let select = cE("select");
						select.id = input.id;
						select.name = input.name;
						select.setAttribute("onchange", "T(this)");
						preScanSSID = input.value;

						for (let i = 0; i < select.children.length; i++) {
							select.removeChild(select.children[i]);
						}

						for (let i = 0; i < networks.length; i++) {
							const option = cE("option");

							option.setAttribute("value", networks[i].ssid);
							option.textContent = `${networks[i].ssid} (${networks[i].rssi} dBm)`; // [${networks[i].bssid.replaceAll(':','')}]

							if (networks[i].ssid === input.value) {
								option.setAttribute("selected", "selected");
								found = true;
							}

							select.appendChild(option);
						}
						const option = cE("option");

						option.setAttribute("value", "!Cs");
						option.textContent = "其它网络……";
						select.appendChild(option);

						if (input.value === "" || input.value === "Your_Network" || found) input.replaceWith(select);
						else select.remove(); 
					}
				}

				button.disabled = false;
				button.textContent = "Scan";
			});
		}
		// replace WiFi select with custom SSID input field again
		function T(cs) {
			if (!cs || cs.value != "!Cs") return;
			let input = cE("input");
			input.type = "text";
			input.id = cs.id;
			input.name = cs.name;
			input.setAttribute("maxlength",32);
			input.value = preScanSSID;
			cs.replaceWith(input);
		}
		function resetWiFi(maxN = undefined) {
			if (maxN) maxNetworks = maxN;
			let entries = gId("wifi_entries").children
			for (let i = entries.length; i > 0; i--) entries[i-1].remove();
			btnWiFi(0);
		}
		function btnWiFi(i) {
			gId("wifi_add").style.display = (i<maxNetworks) ? "inline":"none";
			gId("wifi_rem").style.display = (i>1) ? "inline":"none";
		}
		function addWiFi(ssid="",pass="",bssid="",ip=0,gw=0,sn=0x00ffffff) { // little endian
			var i = gId("wifi_entries").childNodes.length;
			if (i >= maxNetworks) return;
			var b = `<div id="net${i}"><hr class="sml">
网络名称（SSID${i==0?", 为空则不连接":""}）：<br><input type="text" id="CS${i}" name="CS${i}" maxlength="32" value="${ssid}" ${i>0?"required":""}><br>
网络密码：<br><input type="password" name="PW${i}" maxlength="64" value="${pass}"><br>
BSSID（可选）：<br><input type="text" id="BS${i}" name="BS${i}" maxlength="12" value="${bssid}"><br>
静态 IP（保持 0.0.0.0 则使用 DHCP）${i==0?"<br>也用于以太网":""}：<br>
<input name="IP${i}0" type="number" class="s" min="0" max="255" value="${ip&0xFF}" required>.<input name="IP${i}1" type="number" class="s" min="0" max="255" value="${(ip>>8)&0xFF}" required>.<input name="IP${i}2" type="number" class="s" min="0" max="255" value="${(ip>>16)&0xFF}" required>.<input name="IP${i}3" type="number" class="s" min="0" max="255" value="${(ip>>24)&0xFF}" required><br>
静态网关：<br>
<input name="GW${i}0" type="number" class="s" min="0" max="255" value="${gw&0xFF}" required>.<input name="GW${i}1" type="number" class="s" min="0" max="255" value="${(gw>>8)&0xFF}" required>.<input name="GW${i}2" type="number" class="s" min="0" max="255" value="${(gw>>16)&0xFF}" required>.<input name="GW${i}3" type="number" class="s" min="0" max="255" value="${(gw>>24)&0xFF}" required><br>
静态子网掩码：<br>
<input name="SN${i}0" type="number" class="s" min="0" max="255" value="${sn&0xFF}" required>.<input name="SN${i}1" type="number" class="s" min="0" max="255" value="${(sn>>8)&0xFF}" required>.<input name="SN${i}2" type="number" class="s" min="0" max="255" value="${(sn>>16)&0xFF}" required>.<input name="SN${i}3" type="number" class="s" min="0" max="255" value="${(sn>>24)&0xFF}" required></div>`;
			gId("wifi_entries").insertAdjacentHTML("beforeend", b);
			btnWiFi(i+1);
		}
		function remWiFi() {
			const entries = gId("wifi_entries").children;
			const i = entries.length;
			if (i < 2) return;
			entries[i-1].remove();
			btnWiFi(i-1);
		}
		function S() {
			getLoc();
			loadJS(getURL('/settings/s.js?p=1'), false);	// If we set async false, file is loaded and executed, then next statement is processed
			if (loc) d.Sf.action = getURL('/settings/wifi');
		}
	</script>
	<style>@import url("style.css");</style>
</head>
<body onload="S()">
	<form id="form_s" name="Sf" method="post">
		<div class="toprow">
		<div class="helpB"><button type="button" onclick="H('features/settings/#wifi-settings')">?</button></div>
		<button type="button" onclick="B()">返回</button><button type="submit">保存并连接</button><hr>
		</div>
		<h2>WiFi 设置</h2>
		<h3>连接到现有网络</h3>
		<button type="button" id="scan" onclick="N()">扫描</button><br>
		<div id="wifi">
			无线网络
			<div id="wifi_entries"></div>
			<hr class="sml">
			<button type="button" id="wifi_add" onclick="addWiFi()">+</button>
			<button type="button" id="wifi_rem" onclick="remWiFi()">-</button><br>
		</div>
		DNS 服务器地址：<br>
		<input name="D0" type="number" class="s" min="0" max="255" required>.<input name="D1" type="number" class="s" min="0" max="255" required>.<input name="D2" type="number" class="s" min="0" max="255" required>.<input name="D3" type="number" class="s" min="0" max="255" required><br>
		<br>
		mDNS 地址（留空则不启用 mDNS）：<br>
		http:// <input type="text" name="CM" maxlength="32"> .local<br>
		客户端 IP：<span class="sip">未连接</span> <br>
		<h3>配置接入点</h3>
		AP SSID（留空则不启用 AP）：<br> <input type="text" name="AS" maxlength="32"><br>
		隐藏 AP 名称：<input type="checkbox" name="AH"><br>
		AP 密码（留空则为开放）：<br> <input type="password" name="AP" maxlength="63" pattern="(.{8,63})|()" title="Empty or min. 8 characters"><br>
		接入点 WiFi 频道：<input name="AC" type="number" class="xs" min="1" max="13" required><br>
		AP 打开：
		<select name="AB">
			<option value="0">启动后不连接</option>
			<option value="1">断开连接时</option>
			<option value="2">始终打开</option>
			<option value="3">从不（不推荐）</option>
			<option value="4">临时（启动后无连接）</option>
		</select><br>
		AP IP：<span class="sip">未激活</span><br>
		<h3>实验性功能</h3>
		强制 802.11g 模式（仅 ESP8266）：<input type="checkbox" name="FG"><br>
		禁用 WiFi 睡眠：<input type="checkbox" name="WS"><br>
		<i>可以解决连接问题和音频同步问题。<br>
			禁用 WiFi 睡眠会增加功耗。</i><br>
		<div id="tx">发射(TX)功率：<select name="TX">
			<option value="78">19.5 dBm</option>
			<option value="76">19 dBm</option>
			<option value="74">18.5 dBm</option>
			<option value="68">17 dBm</option>
			<option value="60">15 dBm</option>
			<option value="52">13 dBm</option>
			<option value="44">11 dBm</option>
			<option value="34">8.5 dBm</option>
			<option value="28">7 dBm</option>
			<option value="20">5 dBm</option>
			<option value="8">2 dBm</option>
		</select><br>
		<i class="warn">警告：修改发射功率可能导致设备无法访问。</i>
		</div>

		<h3>ESP-NOW 无线</h3>
		<div id="NoESPNOW" class="hide">
			<i class="warn">此固件版本不支持 ESP-NOW。<br></i>
		</div>
		<div id="ESPNOW">
			启用 ESP-NOW：<input type="checkbox" name="RE"><br>
			<i>通过 ESP-NOW 监听事件<br>
			如果未使用远程控制或无线同步，请保持禁用状态，会增加功耗。<br></i>
			配对的远程 MAC 地址：<input type="text" name="RMAC" minlength="12" maxlength="12"><br>
			最后看到的设备：<span class="rlid" onclick="d.Sf.RMAC.value=this.textContent;" style="cursor:pointer;">无</span> <br>
		</div>

		<div id="ethd">
			<h3>以太网类型</h3>
			<select name="ETH">
				<option value="0">无</option>
				<option value="9">ABC! WLED V43 & compatible</option>
				<option value="2">ESP32-POE</option>
				<option value="11">ESP32-POE-WROVER</option>
				<option value="6">ESP32Deux/RGB2Go Tetra</option>
				<option value="7">KIT-VE</option>
				<option value="12">LILYGO T-POE Pro</option>
				<option value="8">QuinLED-Dig-Octa & T-ETH-POE</option>
				<option value="4">QuinLED-ESP32</option>
				<option value="10">Serg74-ETH32</option>
				<option value="5">TwilightLord-ESP32</option>
				<option value="3">WESP32</option>
				<option value="1">WT32-ETH01</option>
			</select><br><br>
		</div>
		<hr>
		<button type="button" onclick="B()">返回</button><button type="submit">保存并连接</button>
	</form>
</body>
</html>
