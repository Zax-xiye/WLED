<!DOCTYPE html>
<html lang="zh-CN">
<head>
	<meta charset="utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
	<title>用户界面设置</title>
	<script src="common.js" async type="text/javascript"></script>
	<script>
	var initial_ds, initial_st, initial_su, oldUrl;
	var sett = null;
	var l = {
		"comp":{
			"labels":"显示按钮标签",
			"colors":{
				"LABEL":"颜色选择方法",
				"picker": "色轮",
				"rgb": "RGB 滑块",
				"quick": "快速颜色选择器",
				"hex": "十六进制颜色输入"
				},
			"pcmbot": "在 PC 模式下显示底部标签栏",
			"pid": "显示预设 ID",
			"seglen": "设置段长度而不是停止 LED",
			"segpwr": "隐藏段功率和亮度",
			"segexp" : "始终展开第一段",
			"css": "启用自定义 CSS",
			"hdays": "启用自定义节假日列表",
			"fxdef": "使用效果默认参数",
			"on": "电源按钮 开启 预设覆盖",
			"off": "电源按钮 关闭 预设覆盖",
			"idsort": "按照 ID 对预设进行排序"
		},
		"theme":{
			"alpha": {
				"bg":"背景不透明度",
				"tab":"按钮不透明度"
			},
			"bg":{
				"url":"背景图像 URL",
				"rnd":"随机背景图像",
				"rndGrayscale":"灰度",
				"rndBlur":"模糊"
			},
			"color":{
				"bg":"十六进制背景颜色"
			}
		}
	};
	function set(path, obj, val) {
		var tar = obj;
		var pList = path.split('_');
		var len = pList.length;
		for(var i = 0; i < len-1; i++) {
			var elem = pList[i];
			if( !tar[elem] ) tar[elem] = {}
			tar = tar[elem];
		}
		tar[pList[len-1]] = val;
	}
	function addRec(s, path = "", label = null)
	{
		var str = "";
		for (let i in s)
		{
			var fk = path + (path?'_':'') + i;
			if (isO(s[i])) {
				if (label && label[i] && label[i]["LABEL"]) str += `<h3>${label[i]["LABEL"]}</h3>`;
				str += addRec(s[i], fk, label? label[i] : null);
			} else {
				var lb = fk;
				if (label && label[i]) lb = label[i];
				else if (s[i+'LABEL']) lb = s[i+'LABEL'];
				if (i.indexOf('LABEL') > 0) continue;
				var t = typeof s[i];
				if (gId(fk)) { //already exists
					if(t === 'boolean')
					{
						gId(fk).checked = s[i];
					} else {
						gId(fk).value = s[i];
					}
					if (gId(fk).previousElementSibling.matches('.l')) {
						gId(fk).previousElementSibling.innerHTML = lb;
					}
				} else {
					if(t === 'boolean')
					{
						str += `${lb}: <input class="agi cb" type="checkbox" id=${fk} ${s[i]?"checked":""}><br>`;
					} else if (t === 'number')
					{
						str += `${lb}: <input class="agi" type="number" id=${fk} value=${s[i]}><br>`;
					} else if (t === 'string')
					{
						str += `${lb}:<br><input class="agi" id=${fk} value=${s[i]}><br>`;
					}
				}
			}
		}
		return str;
	}

	function genForm(s) {
		var str = "";
		str = addRec(s,"",l);
		oldUrl = "";
		
		gId('gen').innerHTML = str;
		if (gId('theme_bg_rnd').checked) {
			toggle("Image");
		} else if (gId('theme_bg_url').value.startsWith('data:')) {
			gId("bg_url").classList.add("hide");
		} else oldUrl = gId("theme_bg_url").value;
	}
	function GetLS()
	{
		sett = localStorage.getItem('wledUiCfg');
		if (!sett) gId('lserr').style.display = "inline";
		try {
			sett = JSON.parse(sett);
		} catch (e) {
			sett = {};
			gId('lserr').style.display = "inline";
			gId('lserr').innerHTML = "&#9888; 设置 JSON 解析失败。 (" + e + ")";
		}
		genForm(sett);
		gId('dm').checked = (gId('theme_base').value === 'light');
	}

	function SetLS()
	{
		var l = d.querySelectorAll('.agi');
		for (var i = 0; i < l.length; i++) {
			var e = l[i];
			var val = e.classList.contains('cb') ? e.checked : e.value;
			set(e.id, sett, val);
			console.log(`${e.id} set to ${val}`);
		}
		try {
			localStorage.setItem('wledUiCfg', JSON.stringify(sett));
			gId('lssuc').style.display = "inline";
		} catch (e) {
			gId('lssuc').style.display = "none";
			gId('lserr').style.display = "inline";
			gId('lserr').innerHTML = "&#9888; 设置 JSON 保存失败。 (" + e + ")";
		}
	}

	function cLS()
	{
		localStorage.removeItem('wledP');
		localStorage.removeItem('wledPmt');
		localStorage.removeItem('wledPalx');
		showToast("Cleared.");
	}
	
	function Save() {
		SetLS();
		if (d.Sf.DS.value != initial_ds || /*d.Sf.ST.checked != initial_st ||*/ d.Sf.SU.checked != initial_su) d.Sf.submit();
	}
	
	function S() {
		getLoc();
		loadJS(getURL('/settings/s.js?p=3'), false, undefined, ()=>{
			initial_ds = d.Sf.DS.value;
			//initial_st = d.Sf.ST.checked;
			initial_su = d.Sf.SU.checked;
			GetLS();
		});	// If we set async false, file is loaded and executed, then next statement is processed
		if (loc) d.Sf.action = getURL('/settings/ui');
	}
	function UI()
	{
		gId('idonthateyou').style.display = (gId('dm').checked) ? 'inline':'none';
		var f = gId('theme_base');
		if (f) f.value = (gId('dm').checked) ? 'light':'dark';
	}

	// random BG image
	function randomBg() {
		let url = oldUrl;
		let t = "theme_bg_rnd";
		if (gId(t).checked) {
			url = "https://picsum.photos/1920/1080";
			if (gId(`${t}Grayscale`).checked) url += "?grayscale";
			if (gId(`${t}Blur`).checked) url += (url.includes("?") ? "&" : "?") + "blur";
			gId("theme_bg_img").value = "";
			gId("bg_url").classList.remove("hide");
		}
		gId("theme_bg_url").value = url;
	}
	// own BG image
	function ownBg(element) {
		const file = element.files[0];
		const reader = new FileReader();
		reader.onload = () => {
			gId("theme_bg_url").value = reader.result;
			gId("bg_url").classList.add("hide");
			if (gId("theme_bg_rnd").checked) toggle("Image");
			gId("theme_bg_rnd").checked = false;
		}
		reader.readAsDataURL(file);
	}
	function removeBgImg() {
		gId("theme_bg_url").value = "";
		gId("theme_bg_img").value = "";
		gId("bg_url").classList.remove("hide");
		if (gId("theme_bg_rnd").checked) toggle("Image");
		gId("theme_bg_rnd").checked = false;
	}
	</script>
	<style>@import url("style.css");</style>
</head>
<body onload="S()">
	<form id="form_s" name="Sf" method="post">
		<div class="toprow">
		<div class="helpB"><button type="button" onclick="H('features/settings/#user-interface-settings')">?</button></div>
		<button type="button" onclick="B()">返回</button><button type="button" onclick="Save()">保存</button><br>
		<span id="lssuc" style="color:green; display:none">&#10004; 本地用户界面设置已保存！</span>
		<span id="lserr" style="color:red; display:none">&#9888; 无法访问本地存储。请确保浏览器启用了该功能。</span><hr>
		</div>
		<h2>Web 设置</h2>
		服务器描述：<input type="text" name="DS" maxlength="32"><br>
		<!-- Sync button toggles both send and receive: <input type="checkbox" name="ST"><br> -->
		启用简化用户界面：<input type="checkbox" name="SU"><br>
		<i>以下用户界面自定义设置对 WLED 设备和此浏览器是唯一的。<br>
		如果使用不同的浏览器、设备或 WLED IP 地址，则需要重新设置。<br>
		刷新主用户界面以应用更改。</i><br>
		
		<div id="gen">加载设置...</div>
		
		<h3>用户界面外观</h3>
		<span class="l"></span>: <input type="checkbox" id="comp_labels" class="agi cb"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_pcmbot" class="agi cb"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_pid" class="agi cb"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_seglen" class="agi cb"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_segpwr" class="agi cb"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_segexp" class="agi cb"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_fxdef" class="agi cb"><br>
		<span class="l"></span>: <input type="number" min=0 max=250 step=1 id="comp_on" class="agi"><br>
		<span class="l"></span>: <input type="number" min=0 max=250 step=1 id="comp_off" class="agi"><br>
		<span class="l"></span>: <input type="checkbox" id="comp_idsort" class="agi cb"><br>
		我讨厌深色模式：<input type="checkbox" id="dm" onchange="UI()"><br>
		<span id="idonthateyou" style="display:none"><i>为什么？</i>&#x1F97A;<br></span>
		<span class="l"></span>: <input type="number" min=0.0 max=1.0 step=0.01 id="theme_alpha_tab" class="agi"><br>
		<span class="l"></span>: <input type="number" min=0.0 max=1.0 step=0.01 id="theme_alpha_bg" class="agi"><br>
		<span class="l"></span>: <input type="text" id="theme_color_bg" maxlength="9" class="agi"><br>
		背景图片：<input type="file" id="theme_bg_img" accept="image/*" onchange="ownBg(this)"> <input type="button" value="Remove" onclick="removeBgImg()"><br>
		<span class="l"></span>: <input type="checkbox" id="theme_bg_rnd" class="agi cb" onchange="randomBg();toggle('Image');">
		<div id="Image">
			<div id="bg_url">
				<span class="l"></span>: <input type="text" id="theme_bg_url" class="agi"><br>
			</div>
		</div>
		<div id="NoImage" class="hide">
			<h4>随机背景图片设置</h4>
			<span class="l"></span>: <input type="checkbox" id="theme_bg_rndGrayscale" class="agi cb" onchange="randomBg()"><br>
			<span class="l"></span>: <input type="checkbox" id="theme_bg_rndBlur" class="agi cb" onchange="randomBg()"><br>
		</div>
		<input id="theme_base" class="agi" style="display:none">
		<span class="l"></span>: <input type="checkbox" id="comp_css" class="agi cb"><br>
		<div id="skin">自定义 CSS：<input type="file" name="data" accept=".css"> <input type="button" value="Upload" onclick="uploadFile(d.Sf.data,'/skin.css');"><br></div>
		<span class="l"></span>: <input type="checkbox" id="comp_hdays" class="agi cb"><br>
		<div id="holidays">节假日：<input type="file" name="data2" accept=".json"> <input type="button" value="Upload" onclick="uploadFile(d.Sf.data2,'/holidays.json');"><br></div>
		<div id="toast"></div>
		<hr><button type="button" onclick="cLS()">清除本地存储</button>
		<hr><button type="button" onclick="B()">返回</button><button type="button" onclick="Save()">保存</button>
	</form>
</body>
</html>